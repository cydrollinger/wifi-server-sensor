//////////////////////////////////////////////////////////////////////////
// Copyright (c) 2009 Dynastream Innovations Inc.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
//////////////////////////////////////////////////////////////////////////

#if (!REFERENCE_DESIGN)
/*
 * CVS Information - autogenerated - do not modify
 *
 * $Header: /repository/Support_Utilities/ANT_NET/ANT_Managed_Library/ANT_Managed_Library/ANTFS/ANTFS_Common.cs,v 1.1 2011-11-14 18:38:00 gallup Exp $
 *
 **************************************************************************
 *
 * To view log use the CVS log command
 */
#endif

using System;
using System.Collections.Generic;
using System.Text;

namespace ANT_Managed_Library.ANTFS
{
    /// <summary>
    /// Internal structure
    /// </summary>
    internal class ResponseTimeout<ResponseType>
    {
        /// <summary>
        /// Initial time
        /// </summary>
        internal DateTime timeStart = DateTime.MaxValue;
        /// <summary>
        /// Desired timeout
        /// </summary>
        internal uint timeLeft = UInt32.MaxValue;     // in seconds
        /// <summary>
        /// ID of response we are waiting for
        /// </summary>
        internal ResponseType ResponseID;
        /// <summary>
        /// Flag to indicate whether we are waiting for a response or not
        /// </summary>
        internal bool bWaitingForResponse = false;

        /// <summary>
        /// Configure a timeout to wait for a response
        /// </summary>
        /// <param name="theResponse">Response we are looking for</param>
        /// <param name="theTimeout">Timeout, in miliseconds</param>
        internal void SetTimeout(ResponseType theResponse, uint theTimeout)
        {
            timeStart = DateTime.Now;
            timeLeft = theTimeout;
            ResponseID = theResponse;
            bWaitingForResponse = true;
        }

        /// <summary>
        /// Clear timeout
        /// </summary>
        internal void ClearTimeout()
        {
            timeStart = DateTime.MaxValue;
            timeLeft = UInt32.MaxValue;
            bWaitingForResponse = false;
        }

        /// <summary>
        /// Check if the timeout has expired.
        /// Timeout is not triggered again, until enabled explicitly
        /// </summary>
        /// <returns>True if the timeout has expired, false otherwise</returns>
        internal bool HasTimeoutExpired()
        {
            if (!bWaitingForResponse || (timeStart == DateTime.MaxValue))
            {
                return false;   // We were not waiting for a response
            }

            if (DateTime.Compare(DateTime.Now, timeStart.AddMilliseconds((double)timeLeft)) > 0)
            {
                ClearTimeout();
                return true;
            }
            else
            {
                return false;
            }
        }
    }

    internal class Common
    {
        internal static byte[] ConvertToByteArray(string myString)
        {
            // Convert as ASCII
            byte[] myArray = System.Text.Encoding.ASCII.GetBytes(myString);
            // Append null character
            Array.Resize(ref myArray, myArray.Length + 1);
            myArray[myArray.Length - 1] = 0;

            return myArray;
        }

        internal static string ConvertToString(byte[] myArray)
        {
            // Convert as ASCII
            string myString = System.Text.Encoding.ASCII.GetString(myArray);
            // Remove trailing null characters
            myString = myString.Remove(myString.IndexOf('\0'));

            return myString;
        }
    }

}