<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ANT_NET</name>
    </assembly>
    <members>
        <member name="T:ANT_Managed_Library.ANTFS.ResponseTimeout">
            <summary>
            Internal structure
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ResponseTimeout.timeStart">
            <summary>
            Initial time
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ResponseTimeout.timeLeft">
            <summary>
            Desired timeout
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ResponseTimeout.ResponseID">
            <summary>
            ID of response we are waiting for
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ResponseTimeout.bWaitingForResponse">
            <summary>
            Flag to indicate whether we are waiting for a response or not
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ResponseTimeout.SetTimeout(ANT_Managed_Library.ANTFS.Response,System.UInt32)">
            <summary>
            Configure a timeout to wait for a response
            </summary>
            <param name="theResponse">Response we are looking for</param>
            <param name="theTimeout">Timeout, in miliseconds</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ResponseTimeout.ClearTimeout">
            <summary>
            Clear timeout
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ResponseTimeout.HasTimeoutExpired">
            <summary>
            Check if the timeout has expired.
            Timeout is not triggered again, until enabled explicitly
            </summary>
            <returns>True if the timeout has expired, false otherwise</returns>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters">
            <summary>
            ANT-FS Device Parameters
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.DeviceID">
            <summary>
            Remote device ID
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.ManufacturerID">
            <summary>
            Manufacturer ID of remote device
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.DeviceType">
            <summary>
            Remote device type
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.AuthenticationType">
            <summary>
            Authenticatio type supported by remote device
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.StatusByte1">
            <summary>
            Status byte 1, as described in the ANT-FS Technology specification
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.StatusByte2">
            <summary>
            Status byte 2, as described in the ANT-FS Technology specification
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte)">
            <summary>
            Configure specified device parameters
            </summary>
            <param name="DevID">Device ID</param>
            <param name="usMfgID">Manufacturer ID</param>
            <param name="usDevType">Device Type</param>
            <param name="AuthType">Authentication Type</param>
            <param name="Stat1">Status byte 1, as described in the ANT-FS Technology specification</param>
            <param name="Stat2">Status byte 2, as described in the ANT-FS Technology specification</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.IsPairingEnabled">
            <summary>
            Checks if the remote device is capable of the pairing authentication scheme
            </summary>
            <returns>True if pairing is supported, false otherwise</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.IsUploadEnabled">
            <summary>
            Checks if the remote device supports uploads
            </summary>
            <returns>True if uploads are supported, false otherwise</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.IsDataAvailable">
            <summary>
            Checks if the remote device has data available for download
            </summary>
            <returns>True if data is available, false otherwise</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.GetBeaconPeriod">
            <summary>
            Obtains the beacon period of the remote device
            </summary>
            <returns>Beacon period of the remote device</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.GetClientState">
            <summary>
            Obtains current state of the remote device
            </summary>
            <returns>State of the remote device</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.SetPairingBit(System.Boolean)">
            <summary>
            Enables/disables the pairing bit in the device parameters
            </summary>
            <param name="bEnable">Set to true to enable pairing, false otherwise</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.SetUploadBit(System.Boolean)">
            <summary>
            Enables/disables the upload bit in the device parameters
            </summary>
            <param name="bEnable">Set to true to enable uploads, false otherwise</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.SetDataAvailableBit(System.Boolean)">
            <summary>
            Enables/disables the data available bit in the device parameters
            </summary>
            <param name="bEnable">Set to true if there is data available for download, false otherwise</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters.ToString">
            <summary>
            Returns a string with the decoded device parameters
            </summary>
            <returns>String with decoded device parameters</returns>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_SearchResults">
            <summary>
            Parameters retrieved by the host after finding a client matching its search criteria
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_SearchResults.DeviceParameters">
            <summary>
            Remote device parameters
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_SearchResults.FriendlyName">
            <summary>
            Friendly name of the remote device
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_SearchResults.ToString">
            <summary>
            Returns a string with the decoded device parameters and friendly name
            </summary>
            <returns>String with decoded device parameters and friendly name</returns>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_Directory">
            <summary>
            ANT-FS Directory
            Contains information about the files available on a remote device
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.dirHeader">
            <summary>
            Directory Header
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.dirSize">
            <summary>
            Number of entries contained in directory
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.dirFiles">
            <summary>
            Indexed entries in the directory
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.#ctor(System.Byte[])">
            <summary>
            Creates an ANTFS_Directory object from downlaoded data
            </summary>
            <param name="DirectoryFile">Directory file received on a download</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.GetNumberOfFileEntries(System.Byte[])">
            <summary>
            Obtains the number of file entries contained in the directory
            </summary>
            <param name="pvDirectory">Directory file</param>
            <returns>Number of file entries contained in directory</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.GetNewFileList(System.Byte[])">
            <summary>
            Decodes the directory and gets a list of files that need to be downloaded
            </summary>
            <param name="pvDirectory">Directory file</param>
            <returns>Array containing the file indexes that need to be downloaded.
            Returns an empty array if there are no new files.</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.LookupFileEntry(System.Byte[],System.UInt32)">
            <summary>
            Looks up the requested directory entry
            </summary>
            <param name="pvDirectory">Directory file</param>
            <param name="ulFileEntry">Zero-based entry number of the requested file (based on the order in which files are written in directory)</param>
            <returns>Requested directory entry, or null if entry is not valid</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.LookupFileIndex(System.Byte[],System.UInt16)">
            <summary>
             Looks up the requested directory entry
            </summary>
            <param name="pvDirectory">Directory file</param>
            <param name="usFileIndex">Index of file to be looked up</param>
            <returns>Requested directory entry, or null if entry is not valid</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.GetHeader(System.Byte[])">
            <summary>
            Retrieves the directory file header
            </summary>
            <param name="pvDirectory">Directory file</param>
            <returns>Directory header structure.  An exception is thrown if the file is too small to contain a header</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.ToString">
            <summary>
            Print directory
            </summary>
            <returns>Formatted string with decoded directory</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.GetVersion">
            <summary>
            Obtains version of the directory
            </summary>
            <returns>Formatted string with ANT-FS directory version</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Directory.ParseFlags(System.Byte)">
            <summary>
            Parses general flags into a string  
            </summary>
            <param name="ucFlags">Flag byte</param>
            <returns>Formatted string with decoded flags</returns>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_Directory.TimeFormat">
            <summary>
            Format of time used in directory
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_Directory.GeneralFlags">
            <summary>
            Bit mapped flags of file permissions
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_Directory.Header">
            <summary>
            Directory header structure
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Header.Version">
            <summary>
            The version of the Directory File Structure.  The most significant 4 bits
            indicate major revision while the least significant 4 bits indicate a minor
            revision
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Header.ElementLength">
            <summary>
            The length of each structure, in bytes
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Header.TimeFormat">
            <summary>
            Defines how the system will keep track of Date/Time stamps
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Header.Reserved">
            <summary>
            Reserved bytes
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Header.SystemTime">
            <summary>
            Number of seconds elapsed since the system was powered up
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Header.Date">
            <summary>
            The number of seconds elapsed since 00:00 in the morning of December 31, 1989.
            The value zero (0) specifies an unknown date.
            Values of less than 0x0FFFFFFF will be interpreted as being system time or 
            some other custom time format (e.g. counter incremented every time directory
            entries are modified)
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry">
            <summary>
            Directory file entry structure
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry.FileIndex">
            <summary>
            Data file index
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry.FileDataType">
            <summary>
            Data type of the file, which informs how to interpret the file
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry.FileSubType">
            <summary>
            Part of the identifier field, used to uniquely identify a file.
            In .FIT, used to identify a sub type of the .FIT file type.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry.FileNumber">
            <summary>
            Part of the identifier field, used to uniquely identify a file.
            In .FIT, used to identify a particular instance of a file sub type.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry.SpecificFlags">
            <summary>
            File data type specific bit mapped flags
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry.GeneralFlags">
            <summary>
            Bit mapped flags of file permissions
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry.FileSize">
            <summary>
            Size of file in bytes
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_Directory.Entry.TimeStamp">
            <summary>
            The number of seconds elapsed since 00:00 in the morning of December 31, 1989.
            The value zero (0) specifies an unknown date.
            Values of less than 0x0FFFFFFF will be interpreted as being system time or
            some other custom time format.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_EventArgs">
            <summary>
            Event arguments for ANT-FS response events
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_EventArgs.responseCurrent">
            <summary>
            ANT-FS Response
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_EventArgs.responseTimeout">
            <summary>
            ANT-FS Response that timed out
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANTFS.ANTFS_EventArgs.usCurrentIndex">
            <summary>
            Current file index downloaded/uploaded
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_EventArgs.#ctor(ANT_Managed_Library.ANTFS.Response)">
            <summary>
            Constructor: Include response code
            </summary>
            <param name="resp">ANT-FS Response</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_EventArgs.#ctor(ANT_Managed_Library.ANTFS.Response,ANT_Managed_Library.ANTFS.Response)">
            <summary>
            Constructor for timeout events
            </summary>
            <param name="resp">ANT-FS Response, should be Response.Timeout</param>
            <param name="timeout">ANT-FS Response that timed out</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_EventArgs.#ctor(ANT_Managed_Library.ANTFS.Response,System.UInt16)">
            <summary>
            Constructor for transfer (download/upload) events
            </summary>
            <param name="resp">ANT-FS Response</param>
            <param name="index">Index of file being uploaded/downloaded</param>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_Exception">
            <summary>
            Exceptions thrown by ANT-FS objects
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Exception">
            <summary>
            An exception occuring in the ANT Managed Library
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Exception.#ctor(System.String)">
            <summary>
            Prefixes given string with "ANTLibrary Exception: "
            </summary>
            <param name="exceptionDetail">String to prefix</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Exception.#ctor(ANT_Managed_Library.ANT_Exception)">
            <summary>
            Copy constructor
            </summary>
            <param name="aex">ANTException to copy</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Exception.#ctor(System.String)">
            <summary>
             Constructor
            </summary>
            <param name="exceptionDetail">String to append to exception message</param>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_RequestFailed_Exception">
            <summary>
            Exceptions thrown by ANT-FS objects when a request to perform a specific operation failed
            Developers must ensure that these exceptions are handled appropiately to continue with the program execution
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_RequestFailed_Exception.#ctor(System.String,ANT_Managed_Library.ANTFS.ReturnCode)">
            <summary>
            Constructor
            </summary>
            <param name="strOperation">Requested operation that failed</param>
            <param name="theReturn">ANT-FS Library return code</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_RequestFailed_Exception.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="exceptionDetail">Requested operation that failed</param>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_Host">
            <summary>
            ANT-FS Host
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.#ctor(System.Byte,System.UInt16,System.Boolean,System.UInt32)">
            <overloads>Constructor opens a connection to an ANT USB device, using the provided device number, 
            baud rate and debug log settings</overloads>
            <summary>
            Constructor opens a connection to an ANT USB device, using the provided device number, baud rate 
            and debug log settings, and initializes the ANT-FS host state machine.
            Throws an exception if the ANT-FS host can not be initialized successfully
            </summary>
            <param name="ucUSBDeviceNum">The device number of the ANT USB device (the first connected device starts at 0 and so on)</param>
            <param name="usBaudRate">The baud rate to connect at (AP2/AT3=57600, AP1=50000)</param>
            <param name="bEnableDebug">Enable/disable debug logging</param>
            <param name="ulTimeout">Number of miliseconds to wait for the USB device connection to be opened.
            If set to zero (0), the library will continue to retry the initialization of the USB stick
            until it is successful</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.#ctor(System.Byte,System.UInt16,System.Boolean)">
            <summary>
            Constructor opens a connection to an ANT USB device, using the provided device number, baud rate 
            and debug log settings, and initializes the ANT-FS host state machine
            Throws an exception if the ANT-FS host can not be initialized successfully
            </summary>
            <param name="ucUSBDeviceNum">The device number of the ANT USB device (the first connected device starts at 0 and so on)</param>
            <param name="usBaudRate">The baud rate to connect at (AP2/AT3=57600, AP1=50000)</param>
            <param name="bEnableDebug">Enable/disable debug logging</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.#ctor(System.Byte,System.UInt16)">
            <summary>
            Constructor opens a connection to an ANT USB device, using the provided device number, baud rate, 
            and initializes the ANT-FS host state machine.
            Debugging is set to the default (disabled)
            Throws an exception if the ANT-FS host can not be initialized successfully
            </summary>
            <param name="ucUSBDeviceNum">The device number of the ANT USB device (the first connected device starts at 0 and so on)</param>
            <param name="usBaudRate">The baud rate to connect at (AP2/AT3=57600, AP1=50000)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.#ctor">
            <summary>
            Constructor opens a connection to the first available ANT USB device, and initializes the
            ANT-FS host state machine
            Throws an exception if the ANT-FS host can not be initialized successfully
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.Finalize">
            <summary>
            Destructor closes all opened resources
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.Dispose">
            <summary>
            Dispose method for explicit resource cleanup
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.AutoDetectUSB">
            <summary>
            Attempts to find the first available USB device to connect to, and figure out its settings
            </summary>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.InitConnection(System.Byte,System.UInt16,System.Boolean,System.UInt32)">
            <summary>
            Initializes connection to an ANT USB device, and the ANT-FS Host state machine
            </summary>
            <param name="ucUSBDeviceNum">The device number of the ANT USB stick (the first connected device starts at 0 and so on)</param>
            <param name="usBaudRate">The baud rate to connect at (AP2/AT3=57600, AP1=50000)</param>
            <param name="bEnableDebug">Enables debug files if true, disables them otherwise</param>
            <param name="ulTimeout">Number of miliseconds to wait for the USB device connection to be opened.
            If set to zero (0), the library will continue to retry the initialization of the USB stick
            until it is successful</param>
            <returns>True if the initializations is successful, false otherwise</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.Dispose(System.Boolean)">
            <summary>
            Close connection, and release all resources
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.ReleaseUploadBuffer">
            <summary>
            Unpin and release buffer holding unmanaged data
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.SetDebugLogs(System.Boolean)">
            <summary>
            Enables debug files
            </summary>
            <param name="bEnableDebug">Enables debug files if true, disables them otherwise</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.SetChannelID(System.Byte,System.Byte)">
            <summary>
            Set the channel ID of the ANT-FS host
            If this function is not used to explicitly configure the channel ID, the ANT-FS host will use the following defaults:
            Device type: 1
            Transmission type: 5
            </summary>
            <param name="ucDeviceType">Device type to assign to channel (ANT Channel ID). Set to 0 for receiver wild card matching</param>
            <param name="ucTransmissionType">Transmission type to assign to channel (ANT Channel ID).  Set to 0 for receiver wild card matching</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.SetChannelPeriod(System.UInt16)">
            <summary>
            Set the channel period of the ANT-FS host.
            If this function is not used to explicitly configure the channel period, the ANT-FS host will use the default value of 8Hz
            </summary>
            <param name="usChannelPeriod">Desired period in seconds * 32768</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.SetNetworkKey(System.Byte[])">
            <summary>
            Set the network key for the ANT-FS host
            If this function is not used to explicitly configure the network key, the ANT-FS host will use the
            ANT-FS network key, as set in the base ANT Library
            </summary>
            <param name="networkKey">8-byte network key</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.ClearSearchDeviceList">
            <summary>
            Clears the internal search device list
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.AddSearchDevice(ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters@,ANT_Managed_Library.ANTFS.ANTFS_DeviceParameters@)">
            <overloads>
            Adds a set of parameters for which to search to the internal search device list
            </overloads>
            <summary>
            Adds a set of parameters for which to search to the internal search device list, explicitly specifying 
            all parameters and search mask. 
            </summary>
            <param name="stSearchMask">Device parameter search mask. Set a member to zero (0) to wildcard search for it.
            Otherwise, set the bits that you want to be matched to 1 in each member.
            Note that the default search masks or wildcards should normally be applied to the ucStatusByte1 and ucStatusByte2 
            members of the search mask. Setting bits outside the masks, specially reserved bits, may lead to undesired
            behavior.</param>
            <param name="stDeviceParameters">Device Parameters to include in a search.  Set the member to the desired search value.
            A member in this structure is ignored if the associated member in the Search Mask is set to zero (0) for wildcard.</param>
            <returns>A handle to the search device entry.  If the return value is zero (0), the function failed adding the device entry.
            This means that the device list is already full</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.AddSearchDevice(System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            Adds a set of parameters for which to search to the internal search device list, matching only the Device ID,
            Manufacturer ID and Device Type
            </summary>
            <param name="ulDeviceID">Device ID to match</param>
            <param name="usManufacturerID">Manufacturer ID to match</param>
            <param name="usDeviceType">Device type to match</param>
            <returns>A handle to the search device entry.  If the return value is zero (0), the function failed adding the device entry.
            This means that the device list is already full</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.RemoveSearchDevice(System.UInt16)">
            <summary>
            Removes a device entry from the internal search list
            </summary>
            <param name="usDeviceHandle">Handle to the device entry to be removed from the list</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.SearchForDevice(System.Byte,System.Byte,System.UInt16,System.UInt32)">
            <overloads>
            Begins a search for ANT-FS remote devices
            Throws an exception if the library is in the wrong state or busy with another request
            </overloads>
            <summary>
            Begins a search for ANT-FS remote devices
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="ucSearchRadioFrequency">The frequency on which to search for devices.  
            This frequency is calculated as (ucSearchRadioFrequency_ * 1 MHz + 2400 MHz).</param>
            <param name="ucConnectRadioFrequency">The frequency on which the connection communication will occur.
            This frequency is calculated as (ucSearchRadioFrequency_ * 1 MHz + 2400 MHz)</param>
            <param name="usRadioChannelID">Device number to assign to channel (ANT Channel ID)</param>
            <param name="ulTimeout">Number of miliseconds to wait for an ANT-FS remote device to be found.
            If the timeout is set to zero (0), the host will continue to search for devices until a device
            is found, the Cancel() function is called, an error occurs, or the library is closed.</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.SearchForDevice(System.Byte,System.Byte,System.UInt16)">
            <summary>
            Begins a search for ANT-FS remote devices.  The search will continue until a device is found,
            the Cancel() function is called, an error occurs, or the library is closed.
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="ucSearchRadioFrequency">The frequency on which to search for devices.  
            This frequency is calculated as (ucSearchRadioFrequency_ * 1 MHz + 2400 MHz).</param>
            <param name="ucConnectRadioFrequency">The frequency on which the connection communication will occur.
            This frequency is calculated as (ucSearchRadioFrequency_ * 1 MHz + 2400 MHz)</param>
            <param name="usRadioChannelID">Device number to assign to channel (ANT Channel ID)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.SearchForDevice">
            <summary>
            Begins a search for ANT-FS remote devices, using the default ANT-FS search frequency (2.450GHz) and
            an adaptive frequency hopping scheme when the connection is established.
            The host will continue to search for devices until a device is found, the Cancel() function is called, 
            an error occurs, or the library is closed.
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.Disconnect(System.UInt16)">
            <overloads>
            Disconnect from a remote device
            Throws an exception if the library is in the wrong state or busy with another request
            </overloads>
            <summary>
            Disconnect from a remote device.  Optionally put that device on a blackout
            list for a period of time
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="usBlackoutTime">Number of seconds the device ID should remain on
            the blackout list. If set to BlackoutTime.None, the device is not put in a blackout list.
            If set to BlackoutTime.Infinite, the device will remain in the list until explicitly
            removed or until the blackout list is reset</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.Disconnect">
            <summary>
            Disconnect from a remote device, without putting it in the blackout list
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.Blackout(System.UInt32,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Puts the device on a blackout list for a period of time.
            A device in the blackout list will not show up in any search results.
            A wildcard parameter (0) is not allowed for any of the device ID parameters.
            An exception is thrown if the device can not be added to the blackout list, 
            either because the list is full, or the device ID is invalid
            </summary>
            <param name="ulDeviceID">The device ID of a specific device</param>
            <param name="usManufacturerID">The specific manufacturer ID</param>
            <param name="usDeviceType">The specific device type</param>
            <param name="usBlackoutTime">Number of seconds the device ID should remain on
            the blackout list. If set to BlackoutTime.None, the device is not put in a blackout list.
            If set to BlackoutTime.Infinite, the device will remain in the list until explicitly
            removed or until the blackout list is reset</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.RemoveBlackout(System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            Remove the device from the blackout list
            A wildcard parameter (0) is not allowed for any of the device ID parameters,
            and will result in returning False.
            Throws an exception if the device can not be removed from the list (e.g. device
            was not in list)
            </summary>
            <param name="ulDeviceID">The device ID of a specific device</param>
            <param name="usManufacturerID">The specific manufacturer ID</param>
            <param name="usDeviceType">The specific device type</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.ClearBlackoutList">
            <summary>
            Clears the blackout list
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.EnablePing(System.Boolean)">
            <summary>
            Enables ping message to be sent to the remote device periodically.
            This can be used to keep the remote device from timing out during operations
            that wait for user input.
            </summary>
            <param name="bEnable">Periodic ping enable</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.Authenticate(ANT_Managed_Library.ANTFS.AuthenticationType,System.Byte[],System.UInt32)">
            <overloads>
            Requests to pair with the connected remote device
            Throws an exception if the library is in the wrong state or busy with another request
            </overloads>
            <summary>
            Request to pair with the connected remote device
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="authType">The type of authentication to execute on the remote device</param>
            <param name="authString">String to be used in conjunction with the particular authentication type (e.g. passkey)</param>
            <param name="ulTimeout">Number of miliseconds to wait for a response after the authenticate command is set</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.Authenticate(ANT_Managed_Library.ANTFS.AuthenticationType,System.String,System.UInt32)">
            <summary>
            Request to pair with the connected remote device
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="authType">The type of authentication to execute on the remote device</param>
            <param name="authString">String to be used in conjunction with the particular authentication type (e.g. friendly name)</param>
            <param name="ulTimeout">Number of miliseconds to wait for a response after the authenticate command is sent</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.Authenticate(ANT_Managed_Library.ANTFS.AuthenticationType,System.UInt32)">
            <summary>
            Request to pair with the connected remote device, without specifying an authentication string
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="authType">The type of authentication to execute on the remote device</param>
            <param name="ulTimeout">Number of miliseconds to wait for a response after the authenticate command is sent</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.Download(System.UInt16,System.UInt32,System.UInt32)">
            <summary>
            Request a download of a file from the authenticated device
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="usFileIndex">The file number to be downloaded</param>
            <param name="ulDataOffset">Byte offset from where to begin transferring the data</param>
            <param name="ulMaxDataLength">Maximum number of bytes to download.  Set to zero (0) if 
            the host does not wish to limit the size of the download</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.DownloadDirectory">
            <summary>
            Requests a download of the directory file from the authenticated device
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.EraseData(System.UInt16)">
            <summary>
            Requests the erasure of a file on the authenticated remote device
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="usFileIndex">The file number of the file to erase</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.Upload(System.UInt16,System.UInt32,System.Byte[],System.Boolean)">
            <overloads>
            Requests an upload of a file to the authenticated device
            Throws an exception if the library is in the wrong state or busy with another request
            </overloads>
            <summary>
            Requests an upload of a file to the authenticated device
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="usFileIndex">The file number to be uploaded</param>
            <param name="ulDataOffset">The byte offset from where to begin transferring the data</param>
            <param name="uploadData">Buffer where data to be sent is stored</param>
            <param name="bForceOffset">Force the offset</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.Upload(System.UInt16,System.Byte[])">
            <summary>
            Requests a new upload of a file to the authenticated device
            Throws an exception if the library is in the wrong state or busy with another request
            </summary>
            <param name="usFileIndex">The file number to be uploaded</param>
            <param name="uploadData">Buffer where data to be sent is stored</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.GetFoundDeviceParameters">
            <summary>
            Retrieves the parameters of the most recently found device
            </summary>
            <returns>Parameters of the most recently found device, or null if no parameters could be retrieved</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.GetAuthResponse">
            <summary>
            Obtains the additional data received on an Authentication Response (e.g. PassKey), if available
            </summary>
            <returns>Authentication response additional parameters, or an empty array if no additional parameters were received</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.GetDownloadStatus">
            <summary>
            Gets the transfer progress of a pending or complete download
            </summary>
            <returns>The transfer status, including the current byte progress,
            total expected length of the download, and current percentage.
            Returns null if no valid status could be obtained.</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.GetUploadStatus">
            <summary>
            Gets the transfer progress of a pending or complete upload
            </summary>
            <returns>The transfer status, including the current byte progress,
            total expected length of the upload, and current percentage.
            Returns null if no valid status could be obtained.</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.GetTransferData">
            <summary>
            Gets the received data from a transfer (download)
            </summary>
            <returns>Buffer containing the downloaded data.
            Returns an empty buffer if no data is available or the download size is 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.GetDownloadSize">
            <summary>
            Retrieves the size of a downloaded file
            </summary>
            <returns>Download size (in bytes)</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.GetStatus">
            <summary>
            Returns the current library status
            </summary>
            <returns>Current library status</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.GetLibraryVersion">
            <summary>
            Gets the version string of the underlying ANT-FS library
            </summary>
            <returns>ANT-FS Library Version String</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.Cancel">
            <summary>
            Cancels any pending actions and returns the library to the appropiate ANT-FS layer if possible,
            i.e. if the library was executing a download command in the transport layer, the library would
            be returned to the Transport State.
            A response of CancelDone will be sent back to the application when the cancel operation is complete.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.ANTFS_Host.ResponseThreadHandler">
            <summary>
            Processing of incoming ANT-FS responses
            </summary>
        </member>
        <member name="P:ANT_Managed_Library.ANTFS.ANTFS_Host.USBDeviceNumber">
            <summary>
            USB device number of this instance
            </summary>
        </member>
        <member name="P:ANT_Managed_Library.ANTFS.ANTFS_Host.BaudRate">
            <summary>
            Baud rate of USB connection of this instance
            </summary>
        </member>
        <member name="E:ANT_Managed_Library.ANTFS.ANTFS_Host.OnResponse">
            <summary>
            The ANT-FS host callback event, triggered every time a response is received from the ANT-FS host library
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ANTFS_Host.ResponseHandler">
             <summary>
             Delegate for the device response event
             </summary>
            <param name="sender">Object originating the event</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.ReturnCode">
            <summary>
            Return codes for ANT-FS operations
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.Response">
            <summary>
            ANT-FS Responses
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.State">
            <summary>
            ANT-FS State
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.AuthenticationType">
            <summary>
            ANT-FS authentication types
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.Print">
            <summary>
            Helper class that prints human readable versions of the constants
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.Print.AsString(System.Enum)">
            <summary>
            Prints the description attribute of an enumeration value
            </summary>
            <param name="eMyEnum">Enumeration value to print</param>
            <returns>Description string, e.g. "Operation successful"</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.Print.AsEnum(System.Enum)">
            <summary>
            Prints the name of an enumeration value
            </summary>
            <param name="eMyEnum">Enumeration value to print</param>
            <returns>Named enumeration string, e.g. "ANTFS.ReturnCode.Pass"</returns>
        </member>
        <member name="T:ANT_Managed_Library.ANTFS.TransferStatus">
            <summary>
            Status of an ongoing or completed data transfer
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.TransferStatus.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructor initializes status and obtains percentage from parameters
            </summary>
            <param name="Progress">Current byte progress</param>
            <param name="Length">Expected data length</param>
        </member>
        <member name="M:ANT_Managed_Library.ANTFS.TransferStatus.ToString">
            <summary>
            Provides a string containing the transfer status
            </summary>
            <returns>Formatted string with the current byte progress, expected length and percentage</returns>
        </member>
        <member name="P:ANT_Managed_Library.ANTFS.TransferStatus.ByteProgress">
            <summary>
            Current byte progress of a data transfer
            </summary>
        </member>
        <member name="P:ANT_Managed_Library.ANTFS.TransferStatus.TotalLength">
            <summary>
            Expected length of a data transfer
            </summary>
        </member>
        <member name="P:ANT_Managed_Library.ANTFS.TransferStatus.Percentage">
            <summary>
            Current percentage of completion of a data transfer
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Channel">
            <summary>
            Control class for an individual ANT channel. Created and accessed through the ANTDevice class.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.getParentDevice">
            <summary>
            Returns the ANTDevice that this channel belongs to
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.getChannelNum">
            <summary>
            Returns the channel number of this instance
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.requestStatus(System.UInt32)">
            <summary>
            Returns current channel status.
            Throws exception on timeout.
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.assignChannel(ANT_Managed_Library.ANT_ReferenceLibrary.ChannelType,System.Byte,System.UInt32)">
            <overloads>Assign channel</overloads>
            <summary>
            Assign an ANT channel along with its main parameters.
            Throws exception if the network number is invalid.
            </summary>
            <param name="channelTypeByte">Channel Type byte</param>
            <param name="networkNumber">Network to assign to channel, must be less than device's max networks-1</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.assignChannel(ANT_Managed_Library.ANT_ReferenceLibrary.ChannelType,System.Byte)">
            <summary>
            Assign an ANT channel.
            </summary>
            <param name="channelTypeByte">Channel Type byte</param>
            <param name="networkNumber">Network to assign to channel</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.assignChannelExt(ANT_Managed_Library.ANT_ReferenceLibrary.ChannelType,System.Byte,ANT_Managed_Library.ANT_ReferenceLibrary.ChannelTypeExtended,System.UInt32)">
            <overloads>Assign channel (extended)</overloads>
            <summary>
            Assign an ANT channel, using extended channel assignment
            Throws exception if the network number is invalid.
            </summary>
            <param name="channelTypeByte">Channel Type byte</param>
            <param name="networkNumber">Network to assign to channel, must be less than device's max netwoks - 1</param>
            <param name="extAssignByte">Extended assignment byte</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.assignChannelExt(ANT_Managed_Library.ANT_ReferenceLibrary.ChannelType,System.Byte,ANT_Managed_Library.ANT_ReferenceLibrary.ChannelTypeExtended)">
            <summary>
            Assign an ANT channel, using extended channel assignment
            Throws exception if the network number is invalid.
            </summary>
            <param name="channelTypeByte">Channel Type byte</param>
            <param name="networkNumber">Network to assign to channel, must be less than device's max netwoks - 1</param>
            <param name="extAssignByte">Extended assignment byte</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.unassignChannel(System.UInt32)">
            <overloads>Unassign channel</overloads>
            <summary>
            Unassign this channel.
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.unassignChannel">
            <summary>
            Unassigns this channel.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelID(System.UInt16,System.Boolean,System.Byte,System.Byte,System.UInt32)">
            <overloads>Set the Channel ID</overloads>
            <summary>
            Set the Channel ID of this channel.
            Throws exception if device type is > 127.
            </summary>
            <param name="deviceNumber">Device number to assign to channel. Set to 0 for receiver wild card matching</param>
            <param name="pairingEnabled">Device pairing bit.</param>
            <param name="deviceTypeID">Device type to assign to channel. Must be less than 128. Set to 0 for receiver wild card matching</param>
            <param name="transmissionTypeID">Transmission type to assign to channel. Set to 0 for receiver wild card matching</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelID(System.UInt16,System.Boolean,System.Byte,System.Byte)">
            <summary>
            Set the Channel ID of this channel.
            Throws exception if device type is > 127.
            </summary>
            <param name="deviceNumber">Device number to assign to channel. Set to 0 for receiver wild card matching</param>
            <param name="pairingEnabled">Device pairing bit</param>
            <param name="deviceTypeID">Device type to assign to channel. Set to 0 for receiver wild card matching</param>
            <param name="transmissionTypeID">Transmission type to assign to channel. Set to 0 for receiver wild card matching</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelID_UsingSerial(System.Boolean,System.Byte,System.Byte,System.UInt32)">
            <overloads>Sets the Channel ID, using serial number as device number</overloads>
            <summary>
            Identical to setChannelID, except last two bytes of serial number are used for device number.
            Not available on all ANT devices.
            Throws exception if device type is > 127.
            </summary>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelID_UsingSerial(System.Boolean,System.Byte,System.Byte)">
            <summary>
            Identical to setChannelID, except last two bytes of serial number are used for device number.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelPeriod(System.UInt16,System.UInt32)">
            <overloads>Sets channel message period</overloads>
            <summary>
            Set this channel's messaging period
            </summary>
            <param name="messagePeriod_32768unitspersecond">Desired period in seconds * 32768</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelPeriod(System.UInt16)">
            <summary>
            Set this channel's messaging period
            </summary>
            <param name="messagePeriod_32768unitspersecond">Desired period in seconds * 32768</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelFreq(System.Byte,System.UInt32)">
            <overloads>Sets channel RF Frequency</overloads>
            <summary>
            Set this channel's RF frequency, with the given offset from 2400Mhz. 
            Note: Changing this frequency may affect the ability to certify the product in certain areas of the world.
            </summary>
            <param name="RFFreqOffset">Offset to add to 2400Mhz</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelFreq(System.Byte)">
            <summary>
            Set this channel's RF frequency, with the given offset from 2400Mhz. 
            Note: Changing this frequency may affect the ability to certify the product in certain areas of the world.
            </summary>
            <param name="RFFreqOffset">Offset to add to 2400Mhz</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelTransmitPower(ANT_Managed_Library.ANT_ReferenceLibrary.TransmitPower,System.UInt32)">
            <overloads>Sets the channel transmission power</overloads>
            <summary>
            Set the transmission power of this channel
            Throws exception if device is not capable of per-channel transmit power.
            </summary>
            <param name="transmitPower">Transmission power to set to</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelTransmitPower(ANT_Managed_Library.ANT_ReferenceLibrary.TransmitPower)">
            <summary>
            Set the transmission power of this channel
            </summary>
            <param name="transmitPower">Transmission power to set to</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelSearchTimeout(System.Byte,System.UInt32)">
            <overloads>Sets the channel search timeout</overloads>
            <summary>
            Set the search timeout
            </summary>
            <param name="searchTimeout">timeout in 2.5 second units (in newer devices 255=infinite)</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setChannelSearchTimeout(System.Byte)">
            <summary>
            Set the search timeout
            </summary>
            <param name="searchTimeout">timeout in 2.5 second units (in newer devices 255=infinite)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.openChannel(System.UInt32)">
            <overloads>Opens the channel</overloads>
            <summary>
            Opens this channel
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.openChannel">
            <summary>
            Opens this channel
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendBroadcastData(System.Byte[])">
            <overloads>Sends broadcast message</overloads>
            <summary>
            Sends the given data on the broadcast transmission.
            Throws exception if data > 8-bytes in length
            </summary>
            <param name="data">data to send (length 8 or less)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendAcknowledgedData(System.Byte[],System.UInt32)">
            <overloads>Sends acknowledged message</overloads>
            <summary>
            Sends the given data as an acknowledged transmission. Returns: 0=fail, 1=pass, 2=timeout, 3=cancelled
            Throws exception if data > 8-bytes in length
            </summary>
            <param name="data">data to send (length 8 or less)</param>
            <param name="ackWaitTime">Time in ms to wait for acknowledgement</param>
            <returns>0=fail, 1=pass, 2=timeout, 3=cancelled</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendAcknowledgedData(System.Byte[])">
            <summary>
            Sends the given data as an acknowledged transmission.
            Throws exception if data > 8-bytes in length
            </summary>
            <param name="data">data to send (length 8 or less)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendBurstTransfer(System.Byte[],System.UInt32)">
            <overloads>Sends burst transfer</overloads>
            <summary>
            Sends the given data as a burst transmission. Returns: 0=fail, 1=pass, 2=timeout, 3=cancelled
            </summary>
            <param name="data">data to send, can be any length</param>
            <param name="completeWaitTime">Time in ms to wait for completion of transfer</param>
            <returns>0=fail, 1=pass, 2=timeout, 3=cancelled</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendBurstTransfer(System.Byte[])">
            <summary>
            Sends the given data as a burst transmission.
            </summary>
            <param name="data">data to send, can be any length</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendExtBroadcastData(System.UInt16,System.Byte,System.Byte,System.Byte[])">
            <overloads>Sends extended broadcast message</overloads>
            <summary>
            Sends the given data as an extended broadcast transmission.
            Throws exception if data > 8-bytes in length
            </summary>
            <param name="deviceNumber">Device number of channel ID to send to</param>
            <param name="deviceTypeID">Device type of channel ID to send to</param>
            <param name="transmissionTypeID">Transmission type of channel ID to send to</param>
            <param name="data">data to send (length 8 or less)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendExtAcknowledgedData(System.UInt16,System.Byte,System.Byte,System.Byte[],System.UInt32)">
            <overloads>Sends extended acknowledged message</overloads>
            <summary>
            Sends the given data as an extended acknowledged transmission. Returns: 0=fail, 1=pass, 2=timeout, 3=cancelled
            Throws exception if data > 8-bytes in length
            </summary>
            <param name="deviceNumber">Device number of channel ID to send to</param>
            <param name="deviceTypeID">Device type of channel ID to send to</param>
            <param name="transmissionTypeID">Transmission type of channel ID to send to</param>
            <param name="data">data to send (length 8 or less)</param>
            <param name="ackWaitTime">Time in ms to wait for acknowledgement</param>
            <returns>0=fail, 1=pass, 2=timeout, 3=cancelled</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendExtAcknowledgedData(System.UInt16,System.Byte,System.Byte,System.Byte[])">
            <summary>
            Sends the given data as an extended acknowledged transmission.
            Throws exception if data > 8-bytes in length
            </summary>
            <param name="deviceNumber">Device number of channel ID to send to</param>
            <param name="deviceTypeID">Device type of channel ID to send to</param>
            <param name="transmissionTypeID">Transmission type of channel ID to send to</param>
            <param name="data">data to send (length 8 or less)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendExtBurstTransfer(System.UInt16,System.Byte,System.Byte,System.Byte[],System.UInt32)">
            <overloads>Sends extended burst data</overloads>
            <summary>
            Sends the given data as an extended burst transmission. Returns: 0=fail, 1=pass, 2=timeout, 3=cancelled
            </summary>
            <param name="deviceNumber">Device number of channel ID to send to</param>
            <param name="deviceTypeID">Device type of channel ID to send to</param>
            <param name="transmissionTypeID">Transmission type of channel ID to send to</param>
            <param name="data">data to send, can be any length</param>
            <param name="completeWaitTime">Time in ms to wait for completion of transfer</param>
            <returns>0=fail, 1=pass, 2=timeout, 3=cancelled</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.sendExtBurstTransfer(System.UInt16,System.Byte,System.Byte,System.Byte[])">
            <summary>
            Sends the given data as an extended burst transmission.
            </summary>
            <param name="deviceNumber">Device number of channel ID to send to</param>
            <param name="deviceTypeID">Device type of channel ID to send to</param>
            <param name="transmissionTypeID">Transmission type of channel ID to send to</param>
            <param name="data">data to send, can be any length</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.closeChannel(System.UInt32)">
            <overloads>Closes the channel</overloads>
            <summary>
            Close this channel
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.closeChannel">
            <summary>
            Close this channel
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setLowPrioritySearchTimeout(System.Byte,System.UInt32)">
            <overloads>Sets the channel low priority search timeout</overloads>
            <summary>
            Sets the search timeout for the channel's low-priority search, where it will not interrupt other open channels.
            When this period expires the channel will drop to high-priority search.
            This feature is not available in all ANT devices.
            </summary>
            <param name="lowPriorityTimeout">Timeout period in 2.5 second units</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setLowPrioritySearchTimeout(System.Byte)">
            <summary>
            Sets the timeout period for the channel's low-priority search, where it will not interrupt other open channels.
            When this period expires the channel will drop to high-priority search.
            </summary>
            <param name="lowPriorityTimeout">Timeout period in 2.5 second units</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.includeExcludeList_addChannel(System.UInt16,System.Byte,System.Byte,System.Byte,System.UInt32)">
            <overloads>Adds a channel ID to the device inclusion/exclusion list</overloads>
            <summary>
            Add the given channel ID to the channel's inclusion/exclusion list.
            The channelID is then included or excluded from the wild card search depending on how the list is configured.
            Throws exception if listIndex > 3.
            </summary>
            <param name="deviceNumber">deviceNumber of the channelID to add</param>
            <param name="deviceTypeID">deviceType of the channelID to add</param>
            <param name="transmissionTypeID">transmissionType of the channelID to add</param>
            <param name="listIndex">position in inclusion/exclusion list to add channelID at (Max size of list is 4)</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.includeExcludeList_addChannel(System.UInt16,System.Byte,System.Byte,System.Byte)">
            <summary>
            Add the given channel ID to the channel's inclusion/exclusion list.
            The channelID is then included or excluded from the wild card search depending on how the list is configured.
            Throws exception if listIndex > 3.
            </summary>
            <param name="deviceNumber">deviceNumber of the channelID to add</param>
            <param name="deviceTypeID">deviceType of the channelID to add</param>
            <param name="transmissionTypeID">transmissionType of the channelID to add</param>
            <param name="listIndex">position in inclusion/exclusion list to add channelID at (0..3)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.includeExcludeList_Configure(System.Byte,System.Boolean,System.UInt32)">
            <overloads>Configures the device inclusion/exclusion list</overloads>
            <summary>
            Configures the inclusion/exclusion list. If isExclusionList is true the channel IDs will be 
            excluded from any wild card search on this channel. Otherwise the IDs are the only IDs accepted in the search.
            Throws exception if list size is greater than 4.
            </summary>
            <param name="listSize">The desired size of the list, max size is 4, 0=none</param>
            <param name="isExclusionList">True = exclusion list, False = inclusion list</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.includeExcludeList_Configure(System.Byte,System.Boolean)">
            <summary>
            Configures the inclusion/exclusion list. If isExclusionList is true the channel IDs will be 
            excluded from any wild card search on this channel. Otherwise the IDs are the only IDs accepted in the search.
            Throws exception if list size is greater than 4.
            </summary>
            <param name="listSize">The desired size of the list, max size is 4, 0=none</param>
            <param name="isExclusionList">True = exclusion list, False = inclusion list</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setProximitySearch(System.Byte,System.UInt32)">
            <overloads>Configures proximity search</overloads>
            <summary>
            Enables a one time proximity requirement for searching.  Only ANT devices within the set proximity bin can be acquired.
            Search threshold values are not correlated to specific distances as this will be dependent on the system design.
            This feature is not available on all ANT devices.
            Throws exception if given bin value is > 10.
            </summary>
            <param name="thresholdBin">Threshold bin. Value from 0-10 (0= disabled). A search threshold value of 1 (i.e. bin 1) will yield the smallest radius search and is generally recommended as there is less chance of connecting to the wrong device. </param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.setProximitySearch(System.Byte)">
            <summary>
            Enables a one time proximity requirement for searching.  Only ANT devices within the set proximity bin can be acquired.
            Search threshold values are not correlated to specific distances as this will be dependent on the system design.
            Throws exception if given bin value is > 10.
            </summary>
            <param name="thresholdBin">Threshold bin. Value from 0-10 (0= disabled). A search threshold value of 1 (i.e. bin 1) will yield the smallest radius search and is generally recommended as there is less chance of connecting to the wrong device. </param>        
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.configFrequencyAgility(System.Byte,System.Byte,System.Byte,System.UInt32)">
            <overloads>Configures the three operating RF frequencies for ANT frequency agility mode</overloads>
            <summary>
            This function configures the three operating RF frequencies for ANT frequency agility mode 
            and should be used with the ADV_FrequencyAgility_0x04 extended channel assignment flag.
            Should not be used with shared, or Tx/Rx only channel types. 
            This feature is not available on all ANT devices.
            </summary>
            <param name="freq1">Operating RF frequency 1</param>
            <param name="freq2">Operating RF frequency 2</param>
            <param name="freq3">Operating RF frequency 3</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Channel.configFrequencyAgility(System.Byte,System.Byte,System.Byte)">
            <summary>
            This function configures the three operating RF frequencies for ANT frequency agility mode 
            and should be used with ADV_FrequencyAgility_0x04 channel assignment flag.
            Should not be used with shared, or Tx/Rx only channel types. 
            </summary>
            <param name="freq1">Operating RF frequency 1</param>
            <param name="freq2">Operating RF frequency 2</param>
            <param name="freq3">Operating RF frequency 3</param>
        </member>
        <member name="E:ANT_Managed_Library.ANT_Channel.channelResponse">
            <summary>
            The channel callback event. Triggered every time a message is received from the ANT device.
            Examples include transmit and receive messages.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Channel.ChannelResponseHandler">
            <summary>
            Delegate for Channel Response Event
            </summary>
            <param name="response">Message details received from device</param>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Device">
            <summary>
            Control class for a given ANT device. An instance of this class is an open connection to the given ANT USB device.
            Handles creating channels and device setup.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.#ctor(System.Byte,System.UInt16)">
            <overloads>
            Opens a connection to an ANT device attached by USB.
            Throws exception if a connection can not be established.
            </overloads>
            <summary>
            Attempts to open a connection to an ANT device attached by USB using the given deviceNum and baud rate
            Throws exception if a connection can not be established.
            </summary>
            <param name="USBDeviceNum">The device number of the ANT USB device (the first connected device starts at 0 and so on)</param>
            <param name="baudRate">The baud rate to connect at (AP2/AT3=57600, AP1=50000)</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.#ctor">
            <summary>
            Automatically connects to first availiable ANTDevice.
            Throws exception if a connection can not be established.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.Finalize">
            <summary>
            Destructor closes all opened resources
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.shutdownDeviceInstance(ANT_Managed_Library.ANT_Device@)">
            <summary>
            Shuts down all open resources and nullifies the given ANTDevice
            </summary>
            <param name="deviceToShutdown">ANTDevice to shutdown</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.ToString">
            <summary>
            Convert instance to a string including the USB device number the connection is on
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getOpenedUSBDeviceNum">
            <summary>
            Returns the device number used when this instance was opened
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getOpenedUSBBaudRate">
            <summary>
            Returns the baud rate used when this instance was opened
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getChannel(System.Int32)">
            <summary>
            Returns the requested ANTChannel or throws an exception if channel doesn't exist.
            </summary>
            <param name="num">Channel number requested</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getNumChannels">
            <summary>
            Returns the number of ANTChannels owned by this device
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.cancelTransfers(System.Int32)">
            <summary>
            Sets the cancel flag on all acknowledged and burst transfers in progress for the given amount of time.
            When these transmissions see the flag they will abort their operation and return as cancelled.
            </summary>
            <param name="cancelWaitTime">Time to set cancel flag for</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getDeviceCapabilities(System.Boolean,System.UInt32)">
            <overloads>Returns the device capabilities</overloads>
            <summary>
            Returns the capabilities of this device.
            Throws an exception if capabilities are not received.
            </summary>
            <param name="forceNewCopy">Force function to send request message to device</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>Last device capabilities received or a new copy if forceNewCopy is true</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getDeviceCapabilities">
            <summary>
            Returns the device capabilities of this device.
            Throws an exception if capabilities are not received.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getDeviceCapabilities(System.UInt32)">
            <summary>
            Returns the device capabilities of this device.
            Throws an exception if capabilities are not received.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.ResetUSB">
            <overloads>Resets the USB device</overloads>
            <summary>
            Resets this USB device at the driver level
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.ResetSystem(System.UInt32)">
            <overloads>Resets the device and all its channels</overloads>
            <summary>
            Reset this device and all associated channels
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.ResetSystem">
            <summary>
            Reset this device and all associated channels
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.setNetworkKey(System.Byte,System.Byte[],System.UInt32)">
            <overloads>Sets a network key</overloads>
            <summary>
            Set the network key for the given network
            Throws exception if net number is invalid or network key is not 8-bytes in length
            </summary>
            <param name="netNumber">The network number to set the key for</param>
            <param name="networkKey">The 8-byte network key</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.setNetworkKey(System.Byte,System.Byte[])">
            <summary>
            Set the network key for the given network
            Throws exception if net number is invalid or network key is not 8-bytes in length
            </summary>
            <param name="netNumber">The network number to set the key for</param>
            <param name="networkKey">The 8-byte network key</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.setTransmitPowerForAllChannels(ANT_Managed_Library.ANT_ReferenceLibrary.TransmitPower,System.UInt32)">
            <overloads>Sets the transmit power for all channels</overloads>
            <summary>
            Set the transmit power for all channels of this device
            </summary>
            <param name="transmitPower">Transmission power to set to</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.setTransmitPowerForAllChannels(ANT_Managed_Library.ANT_ReferenceLibrary.TransmitPower)">
            <summary>
            Set the transmit power for all channels of this device
            </summary>
            <param name="transmitPower">Transmission power to set to</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.EnableLED(System.Boolean,System.UInt32)">
            <overloads>Enables/Disables the device's LED</overloads>
            <summary>
            Enables/Disables the LED flashing when a transmission event occurs
            </summary>
            <param name="IsEnabled">Desired state</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.EnableLED(System.Boolean)">
            <summary>
            Enables/Disables the LED flashing when a transmission event occurs
            </summary>
            <param name="IsEnabled">Desired state</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getDeviceUSBPID">
            <overloads>Obtains the device USB PID</overloads>
            <summary>
            Obtains the PID of the USB device.
            Throws an exception if the PID is not received.
            </summary>
            <returns>PID of the USB device.</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.getDeviceUSBInfo(System.Byte)">
            <overloads>Obtains the device USB Information</overloads>
            <summary>
            Obtains the USB information for the device
            Throws an exception if no information is received
            </summary>
            <param name="deviceNum">USB Device Number</param>
            <returns>USB Device Information.</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.requestMessageAndResponse(System.Byte,ANT_Managed_Library.ANT_ReferenceLibrary.RequestMessageID,System.UInt32)">
            <overloads>Requests a message from the device and returns the response</overloads>
            <summary>
            Request a message from device and returns the response. 
            Throws exception on timeout.
            </summary>
            <param name="channelNum">Channel to send request on</param>
            <param name="messageID">Request to send</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.requestMessageAndResponse(ANT_Managed_Library.ANT_ReferenceLibrary.RequestMessageID,System.UInt32)">
            <summary>
            Request a message from device on channel 0 and returns the response. 
            Throws exception on timeout.
            </summary>
            <param name="messageID">Request to send</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.requestMessage(System.Byte,ANT_Managed_Library.ANT_ReferenceLibrary.RequestMessageID)">
            <overloads>Requests a message from the device</overloads>
            <summary>
            Request a message from device
            </summary>
            <param name="channelNum">Channel to send request on</param>
            <param name="messageID">Request to send</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.requestMessage(ANT_Managed_Library.ANT_ReferenceLibrary.RequestMessageID)">
            <summary>
            Request a message from device
            </summary>
            <param name="messageID">Request to send</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.openRxScanMode(System.UInt32)">
            <overloads>Set device in continuous scanning mode</overloads>
            <summary>
            Starts operation in continuous scanning mode.
            This allows the device to receive all messages matching the configured channel ID mask in an asynchronous manner.
            This feature is not available on all ANT devices.
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.openRxScanMode">
            <summary>
            Starts operation in continuous scanning mode.
            This allows the device to receive all messages matching the configured channel ID mask in an asynchronous manner.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.startCWTest(ANT_Managed_Library.ANT_ReferenceLibrary.TransmitPower,System.Byte,System.UInt32)">
            <overloads>Initializes and starts CW test mode</overloads>
            <summary>
            Initialize and start CW test mode. This mode is to test your implementation for RF frequency requirements.
            The device will transmit an unmodulated carrier wave at the RF frequency of 2400Mhz + RFFreqOffset at the specified power level.
            This mode can then only be exited by a system reset.
            Note: When this function call returns false, the system will be reset automatically.
            </summary>
            <param name="transmitPower">Transmission power to test at</param>
            <param name="RFFreqOffset">Offset to add to 2400Mhz</param>
            <param name="responseWaitTime">Time to wait for response, used for both initialization and start command</param>
            <returns>False if initialization or starting of CW test mode fails. On false, the system is automatically reset.</returns>
            <remarks>
            This function encapsulates both ANT_InitCWTestMode and ANT_SetCWTestMode from the old library.
            It will automatically reset the system if either call fails. 
            The given response time is used for both calls and the reset time is 500ms. 
            So max wait time = responseTime*2 + 500ms 
            </remarks>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.enableRxExtendedMessages(System.Boolean,System.UInt32)">
            <overloads>Enables extended message reception</overloads>
            <summary>
            Enables extended message receiving. When enabled, messages received will contain extended data.
            </summary>
            <param name="IsEnabled">Desired State</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.enableRxExtendedMessages(System.Boolean)">
            <summary>
            Enables extended message receiving. When enabled, messages received will contain extended data.
            </summary>
            <param name="IsEnabled">Desired State</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.crystalEnable(System.UInt32)">
            <overloads>Enables the use of external 32kHz crystal</overloads>
            <summary>
            If the use of an external 32kHz crystal input is desired, this message must be sent once, each time a startup message is received
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
            <remarks> Enabling an external 32kHz crystal input as a low power clock source saves ~85uA while ANT is active when compared to using the internal clock source. </remarks>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.crystalEnable">
            <summary>
            If the use of an external 32kHz crystal input is desired, this message must be sent once, each time a startup message is received
            </summary>
            <remarks> Enabling an external 32kHz crystal input as a low power clock source saves ~85uA while ANT is active when compared to using the internal clock source. </remarks>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.writeRawMessageToDevice(System.Byte,System.Byte[])">
            <summary>
            Writes a message to the device, this function allows sending manually formatted messages.
            </summary>
            <param name="msgID">msgID to write</param>
            <param name="msgData">data buffer to write</param>
            <returns>False if writing bytes to device fails</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_Write(System.Byte[],System.UInt32)">
            <overloads>Writes a SensRCore command to non-volatile memory</overloads>
            <summary>
            Writes a SensRcore command to non-volatile memory.
            Throws exception if command string length > 255, although commands will be much smaller
            </summary>
            <param name="commandString">SensRcore command to write: [Cmd][CmdData0]...[CmdDataN], must be less than 256 bytes</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_Write(System.Byte[])">
            <summary>
            Writes a SensRcore command to non-volatile memory.
            Throws exception if command string length > 255.
            </summary>
            <param name="commandString">SensRcore command to write: [Cmd][CmdData0]...[CmdDataN], must be less than 256 bytes</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_Clear(System.UInt32)">
            <overloads>Clears the NVM</overloads>
            <summary>
            Clears the non-volatile memory. NVM should be cleared before beginning write operations.
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_Clear">
            <summary>
            Clears the non-volatile memory. NVM should be cleared before beginning write operations.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_setDefaultSector(System.Byte,System.UInt32)">
            <overloads>Sets the default SensRCore sector</overloads>
            <summary>
            Set the default sector which will be executed after mandatory execution of sector 0.
            This command has no effect if it is set to 0 or the Read Pins for Sector command appears in sector 0.
            </summary>
            <param name="sectorNum">sector number to set as default</param>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_setDefaultSector(System.Byte)">
            <summary>
            Set the default sector which will be executed after mandatory execution of sector 0.
            This command has no effect if it is set to 0 or the Read Pins for Sector command appears in sector 0.
            </summary>
            <param name="sectorNum">sector number to set as default</param>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_endSector(System.UInt32)">
            <overloads>Writes a sector break to NVM</overloads>
            <summary>
            Writes a sector break in the NVM image
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_endSector">
            <summary>
            Writes a sector break in the NVM image
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_requestNVMDump(System.UInt32)">
            <overloads>Request a dump of the device's script memory</overloads>
            <summary>
            Requests the device to return the current NVM contents through the device callback function.
            The end of the dump is signified by a 0x57 NVM_Cmd msg, which contains 0x04 EndDump code followed by 
            a byte signifying how many instructions were read and returned.
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_requestNVMDump">
            <summary>
            Requests the device to return the current NVM contents through the device callback function.
            The end of the dump is signified by a 0x57 NVM_Cmd msg, which contains 0x04 EndDump code followed by 
            a byte signifying how many instructions were read and returned.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_lockNVM(System.UInt32)">
            <overloads>Locks the NVM contents</overloads>
            <summary>
            Locks the NVM so that it can not be read by the dump function. 
            Can only be disabled by clearing the NVM.
            </summary>
            <param name="responseWaitTime">Time to wait for device success response</param>
            <returns>True on success. Note: Always returns true with a response time of 0</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Device.script_lockNVM">
            <summary>
            Locks the NVM so that it can not be read by the dump function. 
            Can only be disabled by clearing the NVM.
            </summary>
        </member>
        <member name="E:ANT_Managed_Library.ANT_Device.deviceResponse">
            <summary>
            The channel callback event. Triggered every time a message is received from the ANT device.
            Examples include requested responses and setup status messages.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Device.DeviceResponseHandler">
            <summary>
            Delegate for device response event
            </summary>
            <param name="response">Message details received from device</param>
        </member>
        <member name="T:ANT_Managed_Library.ANT_DeviceCapabilities">
            <summary>
            Container for all the device capability information, returned from an ANTDevice
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_DeviceCapabilities.maxANTChannels">
            <summary>
            Number of channels available
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_DeviceCapabilities.maxNetworks">
            <summary>
            Number of simultaneous networks allowed
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_DeviceCapabilities.maxDataChannels">
            <summary>
            Number of SensRcore data channels available
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_DeviceCapabilities.printCapabilities">
            <summary>
            Prints a string containing a formatted, readable version of all the capabilities
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_DeviceCapabilities.ToString">
            <summary>
            Returns a formatted, readable string of all the capabilities
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_DeviceCapabilities.BasicCapabilitiesMasks">
            <summary>
            Basic Capabilities Masks (3rd Byte)
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_DeviceCapabilities.AdvancedCapabilitiesMasks">
            <summary>
            Advanced Capabilities Masks 1 (4th Byte)
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_DeviceCapabilities.AdvancedCapabilities2Masks">
            <summary>
            Advanced Capabilities Masks 2 (5th Byte)
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_DeviceInfo">
            <summary>
            Container for all the USB Device information, returned from an ANTDevice
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_DeviceInfo.productDescription">
            <summary>
            USB Device Product Description
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_DeviceInfo.serialString">
            <summary>
            USB Device Serial String
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_DeviceInfo.printProductDescription">
            <summary>
            Returns a formatted, readable string for the product description
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_DeviceInfo.printSerialString">
            <summary>
            Returns a formatted, readable string for the serial string
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Common">
            <summary>
            This is a static class that manages all the functions and variables common to the whole scope of the library.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Common.autoResetIsEnabled">
            <summary>
            Enables or disables all devices from resetting on startup, shutdown, and on CWTestMode Failure.
            Default = true.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Common.getNumDetectedUSBDevices">
            <summary>
            Returns the number of ANT USB devices currently detected by the system.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Common.enableDebugLogs">
            <summary>
            Initializes and enables debug logs for all devices
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Common.disableDebugLogs">
            <summary>
            Disables and closes the debug logs
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Common.setDebugLogDirectory(System.String)">
            <summary>
            Set the directory the log files are saved to. 
            This string will prefix the file name so must end with a slash or will be part of the name. 
            ie: directoryPath='c:\ANT\logs' will result in files being saved to the \ANT directory named logsdevice0.txt. 
            Throws an exception if directory does not exist.
            </summary>
            <param name="directoryPath">
            Path to directory to save log files in. Default is the running directory.
            This string will prefix the file name so must end with a slash or will be part of the name. 
            ie: directoryPath='c:\ANT\logs' will result in files being saved to the \ANT directory named logsdevice0.txt.
            </param>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary">
            <summary>
            Contains all the ANT constants and enumerations for general use.
            Note: Where desired, in functions where enumerations are required, a byte type can be 
            cast to the enumeration to feed the function raw byte values.
            IE: <c>ANTDeviceInstance.RequestMessage((RequestMessageID)0x4E));</c> would compile.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.ChannelType">
            <summary>
            Channel Type flags. A valid channel type is one BASE parameter (Slave XOR Receive) 
            combined by '|' (bitwise OR) with any desired ADV parameters
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.MessagingReturnCode">
            <summary>
            The int status codes returned by the acknowledged and broadcast messaging functions.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.BasicChannelStatusCode">
            <summary>
            Basic Channel status message codes, the bottom two bits of the received status message
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.TransmitPower">
            <summary>
            Transmit Power offsets
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.StartupMessage">
            <summary>
            Startup message
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.RequestMessageID">
            <summary>
            Message ID to request message.
            Note: Where desired, raw byte values can be cast to the enum type. IE: <c>(RequestMessageID)0x4E</c> will compile.
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.SensRcoreScriptCommandCodes">
            <summary>
            Command Codes for SensRcore operations
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.ANTMessageID">
            <summary>
            MessageIDs for reference
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTMessageID.FIT1_SET_EQUIP_STATE_0x91">
            <summary>
            *** CONFLICT: w/ Sensrcore, Fit1 will never have sensrcore enabled
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID">
            <summary>
            EventIDs for reference
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.EVENT_TRANSFER_TX_START_0x0A">
            <summary>
            a pending transmit transfer has begun
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.CHANNEL_IN_WRONG_STATE_0x15">
            <summary>
            returned on attempt to perform an action from the wrong channel state
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.CHANNEL_NOT_OPENED_0x16">
            <summary>
            returned on attempt to communicate on a channel that is not open
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.CHANNEL_ID_NOT_SET_0x18">
            <summary>
            returned on attempt to open a channel without setting the channel ID
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.CLOSE_ALL_CHANNELS_0x19">
            <summary>
            returned when attempting to start scanning mode
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.TRANSFER_IN_PROGRESS_0x1F">
            <summary>
            returned on attempt to communicate on a channel with a TX transfer in progress
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.TRANSFER_SEQUENCE_NUMBER_ERROR_0x20">
            <summary>
            returned when sequence number is out of order on a Burst transfer
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.MESSAGE_SIZE_EXCEEDS_LIMIT_0x27">
            <summary>
            returned if a data message is provided that is too large
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.INVALID_MESSAGE_0x28">
            <summary>
            returned when the message has an invalid parameter
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.INVALID_NETWORK_NUMBER_0x29">
            <summary>
            returned when an invalid network number is provided
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.INVALID_LIST_ID_0x30">
            <summary>
            returned when the provided list ID or size exceeds the limit
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.INVALID_SCAN_TX_CHANNEL_0x31">
            <summary>
            returned when attempting to transmit on channel 0 when in scan mode
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.INVALID_PARAMETER_PROVIDED_0x33">
            <summary>
            returned when an invalid parameter is specified in a configuration message
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.EVENT_QUE_OVERFLOW_0x35">
            <summary>
            ANT event que has overflowed and lost 1 or more events
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.SCRIPT_FULL_ERROR_0x40">
            <summary>
            error writing to script
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.SCRIPT_WRITE_ERROR_0x41">
            <summary>
            error writing to script
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.SCRIPT_INVALID_PAGE_ERROR_0x42">
            <summary>
            error accessing script page
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.SCRIPT_LOCKED_ERROR_0x43">
            <summary>
            the scripts are locked and can't be dumped
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.FIT_ACTIVE_SEARCH_TIMEOUT_0x60">
            <summary>
            Fit1 only event added for timeout of the pairing state after the Fit module becomes active
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.FIT_WATCH_PAIR_0x61">
            <summary>
            Fit1 only
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ReferenceLibrary.ANTEventID.FIT_WATCH_UNPAIR_0x62">
            <summary>
            Fit1 only
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Response">
            <summary>
            Container for all the information passed from an ANT device callback function
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Response.sender">
            <summary>
            The object that created this response (ie: The corresponding ANTChannel or ANTDevice instance).
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Response.antChannel">
            <summary>
            The channel parameter received in the message. Note: For some messages this is not applicable.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Response.timeReceived">
            <summary>
            The time the message was received.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Response.responseID">
            <summary>
            The MessageID of the response
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Response.messageContents">
            <summary>
            The raw contents of the response message
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Response.getChannelEventCode">
            <summary>
            Returns messageContents[2] cast to an ANTEventID. Throws an exception if this is not a channel event.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Response.getMessageID">
            <summary>
            Returns messageContents[1] cast to an ANTMessageID. Throws an exception if this is not a response event.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Response.getDataPayload">
            <summary>
            Returns the 8-byte data payload of an ANT message. Throws an exception if this is not a received message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Response.getBurstSequenceNumber">
            <summary>
            Returns the burst sequence number (upper three bits of channel number). Throws exception if this is not a burst event.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Response.getDeviceIDfromExt">
            <summary>
            Returns the channel ID portion of an extended message. Throws an exception if this is not an extended message.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Response.isExtended">
            <summary>
            Returns true if this is an extended message, false otherwise
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_Response.splitExtMessage(ANT_Managed_Library.ANT_Response.extMsgParts)">
            <summary>
            Splits and returns the requested part of an extended message. Throws an exception if this is not an extended message.
            </summary>
            <param name="whichPart">The desired part of the message</param>
        </member>
        <member name="T:ANT_Managed_Library.ANT_Response.ANT_ChannelID">
            <summary>
            The parts of a channel ID
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Response.ANT_ChannelID.deviceNumber">
            <summary>
            Device Number
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Response.ANT_ChannelID.pairingBit">
            <summary>
            Pairing Bit
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Response.ANT_ChannelID.deviceTypeID">
            <summary>
            Device Type ID
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_Response.ANT_ChannelID.transmissionTypeID">
            <summary>
            Transmission Type ID
            </summary>
        </member>
        <member name="T:ANT_Managed_Library.ANT_ChannelStatus">
            <summary>
            Contains the information returned by a channel status request message
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ChannelStatus.BasicStatus">
            <summary>
            Bits 0-1 of the status response
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ChannelStatus.networkNumber">
            <summary>
            Bits 2-3 of the status response. Invalid on AP1.
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_ChannelStatus.ChannelType">
            <summary>
            Bits 4-7 of the status response. Not a valid channelType on AP1.
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_ChannelStatus.#ctor(ANT_Managed_Library.ANT_ReferenceLibrary.BasicChannelStatusCode,System.Byte,ANT_Managed_Library.ANT_ReferenceLibrary.ChannelType)">
            <summary>
            Creates and fills the ChannelStatus
            </summary>
            <param name="BasicStatus"></param>
            <param name="networkNumber"></param>
            <param name="ChannelType"></param>
        </member>
        <member name="T:ANT_Managed_Library.ANT_VersionInfo">
            <summary>
            The information for this version of the ANT Managed Library
            </summary>
        </member>
        <member name="F:ANT_Managed_Library.ANT_VersionInfo.versionNumberLastChangedOn">
            <summary>
            This string shows the date the library received its current version number
            </summary>
        </member>
        <member name="M:ANT_Managed_Library.ANT_VersionInfo.getManagedLibraryVersion">
            <summary>
            Returns the version information as a string
            </summary>
            <returns>Managed Library Version String</returns>
        </member>
        <member name="M:ANT_Managed_Library.ANT_VersionInfo.getUnmanagedLibraryVersion">
            <summary>
            Gets the version string of the underlying unmanaged wrapper library, ANT_WrappedLib.dll
            </summary>
            <returns>Unmanaged Wrapper Version String</returns>
        </member>
    </members>
</doc>
