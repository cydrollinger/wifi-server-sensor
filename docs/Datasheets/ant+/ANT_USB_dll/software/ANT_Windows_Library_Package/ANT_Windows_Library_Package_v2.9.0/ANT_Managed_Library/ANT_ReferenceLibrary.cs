//////////////////////////////////////////////////////////////////////////
// Copyright (c) 2009 Dynastream Innovations Inc.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
//////////////////////////////////////////////////////////////////////////


#if (!REFERENCE_DESIGN)
/*
 * CVS Information - autogenerated - do not modify
 *
 * $Header: /repository/Support_Utilities/ANT_NET/ANT_Managed_Library/ANT_Managed_Library/ANT_ReferenceLibrary.cs,v 1.21 2011-11-14 18:37:56 gallup Exp $
 *
 **************************************************************************
 *
 * To view log use the CVS log command
 */
#endif

#if (!REFERENCE_DESIGN)
#define INCLUDE_WAVEFORM
#define INCLUDE_ARCT
#endif

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ANT_Managed_Library
{
    /// <summary>
    /// Contains all the ANT constants and enumerations for general use.
    /// Note: Where desired, in functions where enumerations are required, a byte type can be 
    /// cast to the enumeration to feed the function raw byte values.
    /// IE: <c>ANTDeviceInstance.RequestMessage((RequestMessageID)0x4E));</c> would compile.
    /// </summary>
    public sealed class ANT_ReferenceLibrary
    {
        //removed class scope static modifier because it interferes with some serialization, so a private constructor is needed to enforce static use
        private ANT_ReferenceLibrary()
        {
            throw new Exception("This is a static class, do not create instances");
        }

#pragma warning disable 1591

        /// <summary>
        /// Possible port connection types.
        /// </summary>
        public enum PortType : byte
        {
            USB = 0x00,
            COM = 0x01
        };

        /// <summary>
        /// Possible framing modes.
        /// Use FramerType.basicANT unless you know you need to use another.
        /// </summary>
        public enum FramerType : byte
        {
            basicANT = 0x00,
#if (!REFERENCE_DESIGN)
            HCI_TI = 0x01,
            HCI_BRCM = 0x02,
            HCI_TI_DIRECT = 0x03,
            HCI_ST_ERICSSON = 0x04
#endif
        };

        /// <summary>
        /// Channel Type flags. A valid channel type is one BASE parameter (Slave XOR Receive) 
        /// combined by '|' (bitwise OR) with any desired ADV parameters
        /// </summary>
        [Flags]
        public enum ChannelType : byte
        {
            BASE_Slave_Receive_0x00 = 0x00,
            BASE_Master_Transmit_0x10 = 0x10,
            ADV_Shared_0x20 = 0x20,
            ADV_TxRx_Only_or_RxAlwaysWildCard_0x40 = 0x40,
#if (!REFERENCE_DESIGN)
            ADV_Enable_RSSI_0x80 = 0x80,
#endif           
        };

        [Flags]
        public enum ChannelTypeExtended : byte
        {
            ADV_AlwaysSearch_0x01 = 0x01,
            ADV_FrequencyAgility_0x04 = 0x04,
#if (!REFERENCE_DESIGN)
            ADV_IgnoreTransmissionType_0x02 = 0x02,
            ADV_AutoSharedSlave_0x08 = 0x08,
#endif 
        }

        /// <summary>
        /// The int status codes returned by the acknowledged and broadcast messaging functions.
        /// </summary>
        public enum MessagingReturnCode : int
        {
            Fail = 0,
            Pass = 1,
            Timeout = 2,
            Cancelled = 3,
            InvalidParams = 4,
        }

        /// <summary>
        /// Basic Channel status message codes, the bottom two bits of the received status message
        /// </summary>
        public enum BasicChannelStatusCode : byte
        {
            UNASSIGNED_0x0 = 0x0,
            ASSIGNED_0x1 = 0x1,
            SEARCHING_0x2 = 0x2,
            TRACKING_0x3 = 0x3,
        }

        /// <summary>
        /// Transmit Power offsets
        /// </summary>
        public enum TransmitPower : byte
        {
            RADIO_TX_POWER_MINUS20DB_0x00 = 0x00,
            RADIO_TX_POWER_MINUS10DB_0x01 = 0x01,
            RADIO_TX_POWER_MINUS5DB_0x02 = 0x02,
            RADIO_TX_POWER_0DB_0x03 = 0x03
        };

        /// <summary>
        /// Startup message
        /// </summary>
        public enum StartupMessage : byte
        {
            RESET_POR_0x00 = 0x00,
            RESET_RST_0x01 = 0x01,
            RESET_WDT_0x02 = 0x02,
            RESET_CMD_0x20 = 0x20,
            RESET_SYNC_0x40 = 0x40,
            RESET_SUSPEND_0x80 = 0x80
        };


        /// <summary>
        /// Message ID to request message.
        /// Note: Where desired, raw byte values can be cast to the enum type. IE: <c>(RequestMessageID)0x4E</c> will compile.
        /// </summary>
        public enum RequestMessageID : byte
        {
            VERSION_0x3E = 0x3E,
            CHANNEL_ID_0x51 = 0x51,
            CHANNEL_STATUS_0x52 = 0x52,
            CAPABILITIES_0x54 = 0x54,
            SERIAL_NUMBER_0x61 = 0x61,
#if (!REFERENCE_DESIGN)
            //TODO: Add other requests here
            //Bist, flashprotection, get_temp_cal >>> see ANT_Ware, there is a lot there
#endif
        };


        /// <summary>
        /// Command Codes for SensRcore operations
        /// </summary>
        public enum SensRcoreScriptCommandCodes : byte
        {
            SCRIPT_CMD_FORMAT_0x00 = 0x00,
            SCRIPT_CMD_DUMP_0x01 = 0x01,
            SCRIPT_CMD_SET_DEFAULT_SECTOR_0x02 = 0x02,
            SCRIPT_CMD_END_SECTOR_0x03 = 0x03,
            SCRIPT_CMD_END_DUMP_0x04 = 0x04,
            SCRIPT_CMD_LOCK_0x05 = 0x05,
        };

        /// <summary>
        /// Flags for configuring device ANT library
        /// </summary>
        [Flags]
        public enum LibConfigFlags
        {
            RADIO_CONFIG_ALWAYS_0x01 = 0x01,
            MESG_OUT_INC_TIME_STAMP_0x20 = 0x20,
            MESG_OUT_INC_RSSI_0x40 = 0x40,
            MESG_OUT_INC_DEVICE_ID_0x80 = 0x80,
        }

#if (!REFERENCE_DESIGN)
        /// <summary>
        /// Flags for configuring advanced bursting features.
        /// </summary>
        [Flags]
        public enum AdcancedBurstConfigFlags : uint
        {
            FREQUENCY_HOP_ENABLE = 0x00000001,
        };
#endif

        /// <summary>
        /// MessageIDs for reference
        /// </summary>
        public enum ANTMessageID : byte
        {
            INVALID_0x00 = 0x00,
            EVENT_0x01 = 0x01,

            VERSION_0x3E = 0x3E,
            RESPONSE_EVENT_0x40 = 0x40,

            UNASSIGN_CHANNEL_0x41 = 0x41,
            ASSIGN_CHANNEL_0x42 = 0x42,
            CHANNEL_MESG_PERIOD_0x43 = 0x43,
            CHANNEL_SEARCH_TIMEOUT_0x44 = 0x44,
            CHANNEL_RADIO_FREQ_0x45 = 0x45,
            NETWORK_KEY_0x46 = 0x46,
            RADIO_TX_POWER_0x47 = 0x47,
            RADIO_CW_MODE_0x48 = 0x48,
#if (INCLUDE_WAVEFORM)
            SEARCH_WAVEFORM_0x49 = 0x49,
#endif

            SYSTEM_RESET_0x4A = 0x4A,
            OPEN_CHANNEL_0x4B = 0x4B,
            CLOSE_CHANNEL_0x4C = 0x4C,
            REQUEST_0x4D = 0x4D,

            BROADCAST_DATA_0x4E = 0x4E,
            ACKNOWLEDGED_DATA_0x4F = 0x4F,
            BURST_DATA_0x50 = 0x50,

            CHANNEL_ID_0x51 = 0x51,
            CHANNEL_STATUS_0x52 = 0x52,
            RADIO_CW_INIT_0x53 = 0x53,
            CAPABILITIES_0x54 = 0x54,

            STACKLIMIT_0x55 = 0x55,

            SCRIPT_DATA_0x56 = 0x56,
            SCRIPT_CMD_0x57 = 0x57,

            ID_LIST_ADD_0x59 = 0x59,
            ID_LIST_CONFIG_0x5A = 0x5A,
            OPEN_RX_SCAN_0x5B = 0x5B,


#if (!REFERENCE_DESIGN)
            /// <summary>
            /// OBSOLETE: (for 905 radio)
            /// </summary>
            EXT_CHANNEL_RADIO_FREQ_0x5C = 0x5C,
#endif
            EXT_BROADCAST_DATA_0x5D = 0x5D,
            EXT_ACKNOWLEDGED_DATA_0x5E = 0x5E,
            EXT_BURST_DATA_0x5F = 0x5F,

            CHANNEL_RADIO_TX_POWER_0x60 = 0x60,
            GET_SERIAL_NUM_0x61 = 0x61,
            GET_TEMP_CAL_0x62 = 0x62,
            SET_LP_SEARCH_TIMEOUT_0x63 = 0x63,
#if (!REFERENCE_DESIGN)
            SET_TX_SEARCH_ON_NEXT_0x64 = 0x64,
#endif
            SERIAL_NUM_SET_CHANNEL_ID_0x65 = 0x65,
            RX_EXT_MESGS_ENABLE_0x66 = 0x66,
#if (!REFERENCE_DESIGN)
            RADIO_CONFIG_ALWAYS_0x67 = 0x67,
#endif
            ENABLE_LED_FLASH_0x68 = 0x68,
#if (!REFERENCE_DESIGN)
            LED_OVERRIDE_0x69 = 0x69,

            AGC_CONFIG_0x6A = 0x6A,
            CLOCK_DRIFT_DATA_0x6B = 0x6B,
            RUN_SCRIPT_0x6C = 0x6C,
#endif
            XTAL_ENABLE_0x6D = 0x6D,
#if (!REFERENCE_DESIGN)
            ANTLIB_CONFIG_0x6E = 0x6E,
#endif
            STARTUP_MESG_0x6F = 0x6F,
            AUTO_FREQ_CONFIG_0x70 = 0x70,
            PROX_SEARCH_CONFIG_0x71 = 0x71,
#if (!REFERENCE_DESIGN)

            ADV_BURST_DATA_0x72 = 0x72,
            ADV_BURST_CONFIG_0x78 = 0x78,

            CUBE_CMD_0x80 = 0x80,

            PIN_DIODE_CONTROL_0x8E = 0x8E,
#endif

            FIT1_SET_AGC_0x8F = 0x8F,

            /// <summary>
            /// *** CONFLICT: w/ Sensrcore, Fit1 will never have sensrcore enabled
            /// </summary>
            FIT1_SET_EQUIP_STATE_0x91 = 0x91,

            // SensRcore Messages
            SET_CHANNEL_INPUT_MASK_0x90 = 0x90,
            SET_CHANNEL_DATA_TYPE_0x91 = 0x91,
            READ_PINS_FOR_SECT_0x92 = 0x92,
            TIMER_SELECT_0x93 = 0x93,
            ATOD_SETTINGS_0x94 = 0x94,
            SET_SHARED_ADDRESS_0x95 = 0x95,
#if (!REFERENCE_DESIGN)
            ATOD_EXTERNAL_ENABLE_0x96 = 0x96,
            ATOD_PIN_SETUP_0x97 = 0x97,
            SETUP_ALARM_0x98 = 0x98,
            ALARM_VARIABLE_MODIFY_TEST_0x99 = 0x99,
            PARTIAL_RESET_0x9A = 0x9A,
            OVERWRITE_TEMP_CAL_0x9B = 0x9B,
            SERIAL_PASSTHRU_SETTINGS_0x9C = 0x9C,
#endif

#if (!REFERENCE_DESIGN)
            READ_SEGA_0xA0 = 0xA0,
            SEGA_CMD_0xA1 = 0xA1,
            SEGA_DATA_0xA2 = 0xA2,
            SEGA_ERASE_0xA3 = 0xA3,
            SEGA_WRITE_0xA4 = 0xA4,

            SEGA_LOCK_0xA6 = 0xA6,
            FLASH_PROTECTION_CHECK_0xA7 = 0xA7,
            UARTREG_0xA8 = 0xA8,
            MAN_TEMP_0xA9 = 0xA9,
            BIST_0xAA = 0xAA,
            SELFERASE_0xAB = 0xAB,
            SET_MFG_BITS_0xAC = 0xAC,
            UNLOCK_INTERFACE_0xAD = 0xAD,

            SERIAL_ERROR_0xAE = 0xAE,

            IO_STATE_0xB0 = 0xB0,
            CFG_STATE_0xB1 = 0xB1,
            BLOWFUSE_0xB2 = 0xB2,
            MASTERIOCTRL_0xB3 = 0xB3,
            PORT_GET_IO_STATE_0xB4 = 0xB4,
            PORT_SET_IO_STATE_0xB5 = 0xB5,
#endif

#if (INCLUDE_ARCT)
            RSSI_POWER_0xC0 = 0xC0,
            RSSI_BROADCAST_DATA_0xC1 = 0xC1,
            RSSI_ACKNOWLEDGED_DATA_0xC2 = 0xC2,
            RSSI_BURST_DATA_0xC3 = 0xC3,
            RSSI_SEARCH_THRESHOLD_0xC4 = 0xC4,
#endif
            SLEEP_0xC5 = 0xC5,
            SET_USB_INFO_0xC7 = 0xC7,
#if (!REFERENCE_DESIGN)

             /// <summary>
            /// use 2 byte sub-index identifier
            /// </summary>
            DEBUG_0xF0 = 0xF0, 
#endif

        };

        /// <summary>
        /// EventIDs for reference
        /// </summary>
        public enum ANTEventID : byte
        {
            RESPONSE_NO_ERROR_0x00 = 0x00,
            NO_EVENT_0x00 = 0x00,

            EVENT_RX_SEARCH_TIMEOUT_0x01 = 0x01,
            EVENT_RX_FAIL_0x02 = 0x02,
            EVENT_TX_0x03 = 0x03,
            EVENT_TRANSFER_RX_FAILED_0x04 = 0x04,
            EVENT_TRANSFER_TX_COMPLETED_0x05 = 0x05,
            EVENT_TRANSFER_TX_FAILED_0x06 = 0x06,
            EVENT_CHANNEL_CLOSED_0x07 = 0x07,
            EVENT_RX_FAIL_GO_TO_SEARCH_0x08 = 0x08,
            EVENT_CHANNEL_COLLISION_0x09 = 0x09,
            /// <summary>
            /// a pending transmit transfer has begun
            /// </summary>
            EVENT_TRANSFER_TX_START_0x0A = 0x0A,

            EVENT_CHANNEL_ACTIVE_0x0F = 0x0F,

#if (INCLUDE_ARCT)
            EVENT_TRANSFER_TX_COMPLETED_RSSI_0x10 = 0x10,
#endif
#if (!REFERENCE_DESIGN)
            /// <summary>
            /// only enabled in FIT1
            /// </summary>
            EVENT_TRANSFER_TX_NEXT_MESSAGE_0x11 = 0x11,
#endif

            /// <summary>
            /// returned on attempt to perform an action from the wrong channel state
            /// </summary>
            CHANNEL_IN_WRONG_STATE_0x15 = 0x15,
            /// <summary>
            /// returned on attempt to communicate on a channel that is not open
            /// </summary>
            CHANNEL_NOT_OPENED_0x16 = 0x16,
            /// <summary>
            /// returned on attempt to open a channel without setting the channel ID
            /// </summary>
            CHANNEL_ID_NOT_SET_0x18 = 0x18,
            /// <summary>
            /// returned when attempting to start scanning mode
            /// </summary>
            CLOSE_ALL_CHANNELS_0x19 = 0x19,

            /// <summary>
            /// returned on attempt to communicate on a channel with a TX transfer in progress
            /// </summary>
            TRANSFER_IN_PROGRESS_0x1F = 0x1F,
            /// <summary>
            /// returned when sequence number is out of order on a Burst transfer
            /// </summary>
            TRANSFER_SEQUENCE_NUMBER_ERROR_0x20 = 0x20,
            TRANSFER_IN_ERROR_0x21 = 0x21,
            TRANSFER_BUSY_0x22 = 0x22,

            /// <summary>
            /// returned if a data message is provided that is too large
            /// </summary>
            MESSAGE_SIZE_EXCEEDS_LIMIT_0x27 = 0x27,
            /// <summary>
            /// returned when the message has an invalid parameter
            /// </summary>
            INVALID_MESSAGE_0x28 = 0x28,
            /// <summary>
            /// returned when an invalid network number is provided
            /// </summary>
            INVALID_NETWORK_NUMBER_0x29 = 0x29,
            /// <summary>
            /// returned when the provided list ID or size exceeds the limit
            /// </summary>
            INVALID_LIST_ID_0x30 = 0x30,
            /// <summary>
            /// returned when attempting to transmit on channel 0 when in scan mode
            /// </summary>
            INVALID_SCAN_TX_CHANNEL_0x31 = 0x31,
#if (!REFERENCE_DESIGN)
            /// <summary>
            /// returned when an invalid RSSI threshold is provided
            /// </summary>
            INVALID_RSSI_THRESHOLD_0x32 = 0x32,
#endif
            /// <summary>
            /// returned when an invalid parameter is specified in a configuration message
            /// </summary>
            INVALID_PARAMETER_PROVIDED_0x33 = 0x33,

            /// <summary>
            /// ANT event que has overflowed and lost 1 or more events
            /// </summary>
            EVENT_QUE_OVERFLOW_0x35 = 0x35,

#if (!REFERENCE_DESIGN)
            /// <summary>
            /// !! debug XOSC16M
            /// </summary>
            EVENT_CLK_ERROR_0x36 = 0x36,
#endif

            /// <summary>
            /// error writing to script
            /// </summary>
            SCRIPT_FULL_ERROR_0x40 = 0x40,
            /// <summary>
            /// error writing to script
            /// </summary>
            SCRIPT_WRITE_ERROR_0x41 = 0x41,
            /// <summary>
            /// error accessing script page
            /// </summary>
            SCRIPT_INVALID_PAGE_ERROR_0x42 = 0x42,
            /// <summary>
            /// the scripts are locked and can't be dumped
            /// </summary>
            SCRIPT_LOCKED_ERROR_0x43 = 0x43, 

#if (!REFERENCE_DESIGN)
            /// <summary>
            /// returned to the Command_SerialMessageProcess function
            /// </summary>
            NO_RESPONSE_MESSAGE_0x50 = 0x50,
            /// <summary>
            /// default return to any mesg when the module determines that the mfg procedure has not been fully completed
            /// </summary>
            RETURN_TO_MFG_0x51 = 0x51,
#endif

            /// <summary>
            /// Fit1 only event added for timeout of the pairing state after the Fit module becomes active
            /// </summary>
            FIT_ACTIVE_SEARCH_TIMEOUT_0x60 = 0x60,
            /// <summary>
            /// Fit1 only
            /// </summary>
            FIT_WATCH_PAIR_0x61 = 0x61,
            /// <summary>
            /// Fit1 only
            /// </summary>
            FIT_WATCH_UNPAIR_0x62 = 0x62,
#if (!REFERENCE_DESIGN)
            /// <summary>
            /// AP2USB only, returned when it is unable to change a descriptor string
            /// </summary>
            USB_STRING_WRITE_FAIL_0x70 = 0x70,
#endif
        };

#if (!REFERENCE_DESIGN)
        public enum USB_DescriptorString : byte
        {
            USB_DESCRIPTOR_VID_PID = 0x00,
            USB_DESCRIPTOR_MANUFACTURER_STRING = 0x01,
            USB_DESCRIPTOR_DEVICE_STRING = 0x02,
            USB_DESCRIPTOR_SERIAL_STRING = 0x03
        };
#endif

#if (INCLUDE_ARCT)
        /// <summary>
        /// PIDs for reference
        /// </summary>
        public enum USB_PID : ushort
        {
            ANT_INTERFACE_BOARD = 0x4102,
            ANT_ARCT = 0x4103
        };
#endif

        public const byte MAX_MESG_SIZE = 41; // Must match MARSHALL_MESG_MAX_SIZE_VALUE in unmanagedWrapper dll_exports.cpp
#pragma warning restore 1591
    }
}
