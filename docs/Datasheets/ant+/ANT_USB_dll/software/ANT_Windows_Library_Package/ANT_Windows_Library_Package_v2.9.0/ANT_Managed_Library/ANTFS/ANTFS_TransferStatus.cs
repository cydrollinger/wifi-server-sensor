//////////////////////////////////////////////////////////////////////////
// Copyright (c) 2009 Dynastream Innovations Inc.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
//////////////////////////////////////////////////////////////////////////

#if (!REFERENCE_DESIGN)
/*
 * CVS Information - autogenerated - do not modify
 *
 * $Header: /repository/Support_Utilities/ANT_NET/ANT_Managed_Library/ANT_Managed_Library/ANTFS/ANTFS_TransferStatus.cs,v 1.1 2011-11-14 18:38:00 gallup Exp $
 *
 **************************************************************************
 *
 * To view log use the CVS log command
 */
#endif

//////////////////////////////////////////////////////////////////////////
// This file contains all the enumerations and constants for general 
// use with ANT-FS
//////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;


namespace ANT_Managed_Library.ANTFS
{
    /// <summary>
    /// Status of an ongoing or completed data transfer
    /// </summary>
    public class TransferStatus
    {
        private uint myByteProgress;
        private uint myTotalLength;
        private byte myPercentage;

        /// <summary>
        /// Constructor initializes status and obtains percentage from parameters
        /// </summary>
        /// <param name="Progress">Current byte progress</param>
        /// <param name="Length">Expected data length</param>
        public TransferStatus(uint Progress, uint Length)
        {
            this.myByteProgress = Progress;
            this.myTotalLength = Length;
            if (Length != 0)
                this.myPercentage = (byte)Math.Round(((decimal)Progress / (decimal)Length) * 100);
            else
                this.myPercentage = 0;
        }

        /// <summary>
        /// Current byte progress of a data transfer
        /// </summary>
        public uint ByteProgress
        {
            get { return myByteProgress; }
        }

        /// <summary>
        /// Expected length of a data transfer
        /// </summary>
        public uint TotalLength
        {
            get { return myTotalLength; }
        }

        /// <summary>
        /// Current percentage of completion of a data transfer
        /// </summary>
        public byte Percentage
        {
            get { return myPercentage; }
        }

        /// <summary>
        /// Provides a string containing the transfer status
        /// </summary>
        /// <returns>Formatted string with the current byte progress, expected length and percentage</returns>
        public override string ToString()
        {
            return "Transfer Status: (" + myByteProgress + "/" + myTotalLength + ") ... " + myPercentage + '%';
        }

    }

}